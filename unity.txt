Download unity personal, do the registration etc.

Create new project, choose 3d default values.
Make sure to have the following in 'hierarchy'.

* Main Camera
* Directional Light

Click on Main camera in hierarchy. Look in 'inspector' window. Add new component > skybox.
I downloaded the 'purple nebula' skybox from the unity asset store.

Fiddle with camera make it look like it is supposed to.
Main camera position x:0,y:1,z:-10 rotation 0,0,0 scale 1,1,1 
(maybe we could rotate it to fix the y direction mismatch?)

directional light behind camera, illuminating scene. easiest to set up by dragging in a model and moving stuff around until it looks good?

oh right, i downloaded an asset store model 'droidfigther', removed most of the crap attached to it, and dragged it into the hierarchy.

To the droidfigther, add two component scripts.

-------------------------
using UnityEngine;
using System.Collections;

public class NewBehaviourScript : MonoBehaviour {
	void Start () {	}
	
	// Update is called once per frame
	void Update () {
		var udp = GetComponent<UDPLISTEN> (); // get a reference to the other script
		var laserX = udp.latestX;
		var laserY = udp.latestY;
		
		// y is inverted, and i think 480 is max pointer value received
		// since camera is at z=0, convert to world point at z=40, 40 units away from camera.
		var res = Camera.main.ScreenToWorldPoint(new Vector3(laserX, 480-udp.latestY, 40));
		transform.position = res;
		
		// this is the rotation stuff.
		// there is a 90 degree offset, and remember that the y axis is flipped.
		var convertedXAngle = (udp.latestAngle*-1)+450;

		//set the space ship rotation to match the travel direction
		transform.localEulerAngles = new Vector3(convertedXAngle,90,270);
	}
}
----------------------
using UnityEngine;
using System.Collections;
using System.Threading;
using System.Net;
using System.Net.Sockets;

public class UDPLISTEN : MonoBehaviour {

	// these fields become accesable to other scripts
	public float latestX =0;
	public float latestY=0;
	public float latestAngle=0;
	public float latestLength=0;
	
	Thread UdpRecv;
	UdpClient listener;
	// Use this for initialization
	void Start () {
		UdpRecv = new Thread(new ThreadStart(Loop));
		UdpRecv.IsBackground = true;
		UdpRecv.Start ();
	}
	
	// listen for udp packets in a separate thread.
	void Loop(){
		listener = new UdpClient(10001); // 10001 is the port, obv. remember to open the firewall!
		IPEndPoint groupEP = new IPEndPoint(IPAddress.Any,10001);
		try 
		{
			while (true) 
			{
				byte[] bytes = listener.Receive( ref groupEP);
				var str = System.Text.Encoding.UTF8.GetString(bytes);
				var datasplit = str.Split('#');
				if( datasplit.Length > 1 )
				{
					var datapoint = datasplit[1].Split(' ');
						
					/foreach( var point in data)
					if( datapoint.Length > 0)
					{
						var point = datapoint[0];
						Debug.Log (point);
						var dataset = point.Split(',');
						if( dataset.Length >= 5)
						{
							float[] fs = new []{0.0f,0.0f,0.0f,0.0f,0.0f};
							var resX = float.TryParse(dataset[0],out fs[0]);
							var resY = float.TryParse(dataset[1],out fs[1]);
							var resD = float.TryParse(dataset[2],out fs[2]);
							var resA = float.TryParse(dataset[3],out fs[3]);
							if( resX && resY && resD && resA )
							{
								latestX = fs[0];
								latestY = fs[1];
								latestLength = fs[2];
								latestAngle = fs[3];
							}
							float latestId;
							var resID = float.TryParse(dataset[4],out latestId);
						}
					}
				}
				Thread.Sleep(1);			
			}
			
		} 
		catch (System.Exception e) 
		{
			Debug.Log(e.ToString());
		}
		finally
		{
			listener.Close();
		}
	}
	// Update is called once per frame
	void Update () {}

	void OnDisable() 
	{ 
		if ( UdpRecv!= null) 
			UdpRecv.Abort(); 
	} 
}
